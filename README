There are 4 sets of tests: hardware performance counters, testing the sorts to
see if they work, simplescalar and software branch predictors.

main.c:

	Enter the code directory. In main.c there are a list of sorts to be tested
	(look for test_sort(). The #defines TEST_MIN and TEST_MAX control how many
	keys are to be tested. The sorts are tested for an array of every size
	between the min and max, also using that size as a seed for the random
	number generator.

	Some sorts do not work. Sorry. multi_quicksort and multi_quicksort_seq
	don't always work, but they do with the sizes used in the other tests.

	The #define RANDOM_SIZE controls time_sort() which gives a quick tick count
	or how long it takes to run a sort. Not very official, at all. It also
	defines the size of array used for the software predictors, which is
	official.

	The #define RUN_VISUAL decides if the visual tests are being done. These
	were used in development, and aren't that interesting.

Hardware counters:

	In the code/ directory, call do_all_papiex or do_all_perfex. You need a
	patched kernel for this. See: http://icl.cs.utk.edu/papi/.

	Capture the output (Ctrl-C when bored, or needing results, as this will
	take a long time):
		$ ./do_all_papiex > my_results
	or
		$ ./do_all_perfex > my_results

	If you use papiex (more accurate), then it needs to be converted to the
	other format:
		$ ../scripts/papi_convert my_results > new_results

	Then process the results to give you graphs:
		$ ../scripts/process_perfex_output new_results

	There's a little bit of hard coding in this script, so change $key_num to
	the number of times perfex actually ran. Also modify the input so that only
	completed work cycles are there. This means if the last sort you ran was
	on2_selectsort, and it ran 256 times, but other sorts ran 257 times, remove
	the other sorts from the results file.

	This produces a file in the data/ directory called processes_cycles_data
	which is in gnuplot format. If you add more sorts to the framework, you'll
	need to edit the gnuplot scripts in data/perfex_gnuplot_scripts/ with the
	column numbers that are printed out.

	To create the gnuplot images, enter the data/perfex_gnuplot_scripts/
	directory and:
		$ gnuplot *

	The images appear in the data/plots/ directory.

Software branch predictors:

	To run the branch predictors, enter the code/ directory, and ensure that
	-D_USE_SOFTWARE_PREDICTOR is set in the CFLAGS line. Then:
		$ make
		$ ./fastsort

	
	The software counters will appear in data/counters/. To process these,
	enter that directory and run:
		$ ./process_counter *

	This will print out the maximum branches. If this isn't slightly lower than
	the y-axis in the gnuplot scripts, it will need to be changed (On line 8 of
	process_counter, then rerun it).

	This creates the gnuplot data files in data/counter_gnuplot_data and
	gnuplot scripts in the data/counter/gnuplot_generated_scripts/ directory.
	To create the images, enter the scripts directory and run:
		$ gnuplot *

	The images are put into the /data/plots directory.
		

Simplescalar:

	If your simplescalar binaries are big endian (if gcc is
	ssbig-na-sstrix-gcc), then edit the $CC variable in scripts/do_simple to
	reflect this.

	In the code/ directory, run:
		$ ./do_all_simple

	This will run do_simple 10 times per sort, using data/BIG as it's input.
	Simplescalar's output is captured by the scripts, edited and output into a
	more human readable format, in data/simple_logs. To convert this to gnuplot
	format, run:
		$ ../scripts/do_all_convert

	As well as gnuplot data files, stored in data/converted_simple_logs/, this
	creates gnuplot scripts for each sort type and each sort, stored in
	data/simplescalar_generated_gnuplot_scripts.


Documents:

	The are four documents in docs/. docs/fyp_report/ is the original project
	this was all derived from. docs/tech_report/ is the expanded technical
	report incorporating everything you see here. docs/branch_paper/ is the
	first paper, mostly discussing branch prediction, and docs/cache_paper/ is
	the other paper, discussing cache performance.

	The create the papers, run:
		$ make

	in the respective directories. All the papers use plots from the
	data/plots/ directory, and have symlinks to it. Some of the plots might be
	slightly and subtly different, so it's best to enter the /docs/*/scripts
	directory first, and run:
		$ ./gnuplot_dir

	Running make will not check a dependency of the plots, so it will be necessary to:
		$ make again
		or
		$ make clean
		$ make
	
	to resolve this.

	All the macros used to present the graphics are in report.tex. The code is
	in docs/*/code/ and has been edited for readability from that which was
	code/.


