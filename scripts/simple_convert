#!/usr/bin/perl -w
use Getopt::Std;

my %options=();
getopts("hso",\%options);

if (defined($options{"h"}) || (scalar(@ARGV) == 0))
{
	die("simple_convert [options] filename\noptions are:\n\t-h - this help message\n-s - scale numeric results by the number of keys \n-o - offset everything from do_nothing\n");
}

$scale = 0;
if (defined($options{"s"})) { $scale = 1; } 

$offset = 0;
if (defined($options{"o"})) { $offset = 1; } 

if ($offset) # read in the offset results
{
	$argument = "../data/simple_logs/do_nothing_random.org";
	unless (-e $argument) { die("file '$argument' does not exist\n"); }

	#get the actual filename
	$filename = "do_nothing";

	# parse the log
	open(LOG, $argument);
	@lines = <LOG>;
	chomp @lines;
	close(LOG);

	# skip date
	shift(@lines);

	# skip "run as" and line of dashes
	shift(@lines);
	shift(@lines);

	@simulators = ();
	while(@lines)
	{

		# find out all the sizes and the simulator name
		$simulator_sizes = shift(@lines);
		if ($simulator_sizes eq "Command list: ") { last;} # the end
		$simulator_sizes =~ /(\S+)\s+(.*)/;
		$simulator = $1;
		push @simulators, $simulator;

		@sizes = split(/\|/, $2);
		foreach $size (@sizes) {$size =~ s/\s//g;} # remove whitespace
		%seen = ();
		@sizes = grep { ! $seen{$_} ++ } @sizes; # uniq it

		# get the parameters
		@local_params = ();
		while($_ = shift(@lines))
		{
			if ($_ =~ /\-\-/) {last;}

			push @local_params, $_;
		}
		@{$params{$simulator}} = @local_params;

		# get the results
		@local_keywords = ();
		while($_ = shift(@lines))
		{
			if ($_ =~ /\-\-/) {last;} # seperator is ------------- etc
			$_ =~ /(\S+)\s+(.*)/;
			$keyword = $1;
			push @local_keywords, $keyword; # save it for later
			@local_results = split(/\|/, $2);

			# now put them into the big associative array
			foreach $n (@sizes)
			{
				foreach $param (@local_params)
				{
					$result = shift(@local_results);
					if (defined($result))
					{
						$result =~ s/\s//g; # remove whitespace
						if (!($result eq "xxxxxxxxxxxxx"))
						{
#							print "results{$simulator}{$param}{$n}{$keyword} = $result\n";
							$nothing{$simulator}{$param}{$n}{$keyword} = $result;
						}
					}
				}
			}
		}
		@{$keywords{$simulator}} = @local_keywords;
	}

}

# start to actually do thing
foreach $argument (@ARGV)
{
	unless (-e $argument) { die("file '$argument' does not exist\n"); }

	#get the actual filename
	@path = split(/\//, $argument);
	$filename = pop(@path);
	#HACK  TODO
	$filename =~ s/_random.org//g;

	# make a directory for the logs
	mkdir "../data/converted_simple_logs/$filename";

	# parse the log
	open(LOG, $argument);
	@lines = <LOG>;
	chomp @lines;
	close(LOG);

	# skip date
	shift(@lines);

	# skip "run as" and line of dashes
	shift(@lines);
	shift(@lines);

	@simulators = ();
	while(@lines)
	{

		# find out all the sizes and the simulator name
		$simulator_sizes = shift(@lines);
		if ($simulator_sizes eq "Command list: ") { last;} # the end
		$simulator_sizes =~ /(\S+)\s+(.*)/;
		$simulator = $1;
		push @simulators, $simulator;

		@sizes = split(/\|/, $2);
		foreach $size (@sizes) {$size =~ s/\s//g;} # remove whitespace
		%seen = ();
		@sizes = grep { ! $seen{$_} ++ } @sizes; # uniq it

		# get the parameters
		@local_params = ();
		while($_ = shift(@lines))
		{
			if ($_ =~ /\-\-/) {last;}

			push @local_params, $_;
		}
		@{$params{$simulator}} = @local_params;

		# get the results
		@local_keywords = ();
		while($_ = shift(@lines))
		{
			if ($_ =~ /\-\-/) {last;} # seperator is ------------- etc
			$_ =~ /(\S+)\s+(.*)/;
			$keyword = $1;
			push @local_keywords, $keyword; # save it for later
			@local_results = split(/\|/, $2);

			# now put them into the big associative array
			foreach $n (@sizes)
			{
				foreach $param (@local_params)
				{
					$result = shift(@local_results);
					if (defined($result))
					{
						$result =~ s/\s//g; # remove whitespace
						if (!($result eq "xxxxxxxxxxxxx"))
						{
#							print "results{$simulator}{$param}{$n}{$keyword} = $result\n";
							$results{$simulator}{$param}{$n}{$keyword} = $result;
						}
					}
				}
			}
		}
		@{$keywords{$simulator}} = @local_keywords;
	}
	foreach $simulator (@simulators)
	{
#		print "simulator = $simulator\n";
		foreach $param (@{$params{$simulator}})
		{
#			print "param = $param\n";
			$comment = "#set_size_in_keys";
			$output = "";
			foreach $n (@sizes)
			{
#				print "n = $n\n";
				$output .= "$n ";
				foreach $keyword (@{$keywords{$simulator}})
				{
#					print "keyword = $keyword\n";
					$result = $results{$simulator}{$param}{$n}{$keyword};
					if (defined($result))
					{
						if ($n == $sizes[0]) # only do once
						{
							$comment .= " $keyword";
						}
						if ($offset && (!($result =~ m/\D/)) && (!$argument =~ /do_nothing/))
						{
							$result -= $nothing{$simulator}{$param}{$n}{$keyword};
						}
						if ($scale && (!($result =~ m/\D/)))
						{
							$output .= ($result/$n)." ";
						}
						else
						{
							$output .= "$result ";
						}

					}
				}
				$output .= "\n";
			}
			$param =~ s/\ /_/g;
			$fullname = "$filename\_$simulator\_$param";
			open(OUT, "> ../data/converted_simple_logs/$filename/$fullname");
			print OUT $comment."\n";
			print OUT $output;
			close(OUT);
		}
	}
}
